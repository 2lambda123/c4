{"version":3,"sources":["player/player.ts","utils.ts","board/base.ts","board/index.ts","player/player-ai.ts","player/player-human.ts","player/player-shadow.ts","player/index.ts","game/game-base.ts","game/game-online/shared.ts","game/index.ts","lib.ts"],"names":[],"mappings":"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","file":"lib.js","sourceRoot":"..\\src","sourcesContent":["import { BoardBase, BoardPiece } from '../board'\n\nexport abstract class Player {\n  boardPiece: BoardPiece\n  abstract getAction(board: BoardBase): Promise<number>\n  constructor(boardPiece: BoardPiece) {\n    this.boardPiece = boardPiece\n  }\n}\n","import { BoardPiece, BoardBase } from './board/base'\n\nexport const BIG_POSITIVE_NUMBER: number = 10 ** 9 + 7\nexport const BIG_NEGATIVE_NUMBER: number = -BIG_POSITIVE_NUMBER\n\nexport function showMessage(message: string = ''): void {\n  const messageDOM: Element | null = document.querySelector('.message')\n\n  if (!messageDOM) return console.error('Message DOM is null!')\n\n  messageDOM.classList.remove('hidden')\n\n  const messageContentDOM: Element | null = document.querySelector(\n    '.message-body-content'\n  )\n\n  if (!messageContentDOM)\n    return console.error('Message body content DOM is null!')\n\n  messageContentDOM.innerHTML = message\n\n  const messageDismissDOM: Element | null = document.querySelector(\n    '.message-body-dismiss'\n  )\n\n  if (!messageDismissDOM)\n    return console.error('Message body dismiss DOM is null!')\n\n  const dismissHandler = (): void => {\n    messageDOM.classList.add('invisible')\n    messageDOM.addEventListener('transitionend', (): void => {\n      messageDOM.classList.add('hidden')\n      messageDOM.classList.remove('invisible')\n    })\n\n    messageDismissDOM.removeEventListener('click', dismissHandler)\n  }\n\n  messageDismissDOM.addEventListener('click', dismissHandler)\n}\n\n/**\n *\n * @param {{ x: number; y: number }} coord The Coordinates of the point to be checked.\n * @param {number} columnXBegin The X-Coordinate of N-th column.\n * @param {number} radius The radius of a piece.\n */\nexport function isCoordOnColumn(\n  coord: { x: number; y: number },\n  columnXBegin: number,\n  radius: number\n): boolean {\n  return (coord.x - columnXBegin) * (coord.x - columnXBegin) <= radius * radius\n}\n\nexport function getColumnFromCoord(coord: { x: number; y: number }): number {\n  for (let i: number = 0; i < BoardBase.COLUMNS; i++)\n    if (\n      isCoordOnColumn(\n        coord,\n        3 * BoardBase.PIECE_RADIUS * i +\n          BoardBase.MASK_X_BEGIN +\n          2 * BoardBase.PIECE_RADIUS,\n        BoardBase.PIECE_RADIUS\n      )\n    )\n      return i\n\n  return -1\n}\n\nexport function getRandomColumnNumber(): number {\n  return Math.floor(Math.random() * BoardBase.COLUMNS)\n}\n\nexport function choose(choice: Array<any>): any {\n  return choice[Math.floor(Math.random() * choice.length)]\n}\n\n/**\n * @see https://esdiscuss.org/topic/promises-async-functions-and-requestanimationframe-together\n */\nexport function animationFrame(): Promise<Function> {\n  let resolve: Function | null = null\n  const promise: Promise<Function> = new Promise(\n    (r: Function): Function => (resolve = r)\n  )\n\n  if (resolve) window.requestAnimationFrame(resolve)\n\n  return promise\n}\n\nexport function clone(array: Array<Array<any>>): Array<Array<any>> {\n  const arr: Array<Array<any>> = []\n\n  for (let i: number = 0; i < array.length; i++) arr[i] = array[i].slice()\n\n  return arr\n}\n\nexport function getMockPlayerAction(\n  map: Array<Array<number>>,\n  boardPiece: BoardPiece,\n  column: number\n): {\n  success: boolean\n  map: Array<Array<number>>\n} {\n  const clonedMap: Array<Array<any>> = clone(map)\n\n  if (\n    clonedMap[0][column] !== BoardPiece.EMPTY ||\n    column < 0 ||\n    column >= BoardBase.COLUMNS\n  )\n    return {\n      success: false,\n      map: clonedMap,\n    }\n\n  let isColumnEverFilled: boolean = false\n  let row: number = 0\n  for (let i: number = 0; i < BoardBase.ROWS - 1; i++)\n    if (clonedMap[i + 1][column] !== BoardPiece.EMPTY) {\n      isColumnEverFilled = true\n      row = i\n\n      break\n    }\n\n  if (!isColumnEverFilled) row = BoardBase.ROWS - 1\n\n  clonedMap[row][column] = boardPiece\n\n  return {\n    success: true,\n    map: clonedMap,\n  }\n}\n\n/**\n * From Mozilla Developer Network\n * https://developer.mozilla.org/en-US/docs/Web/Events/resize\n */\nexport function onresize(): { add: Function } {\n  const callbacks: Array<Function> = []\n  let running: boolean = false\n\n  // Fired on resize event.\n  function resize() {\n    if (!running) {\n      running = true\n\n      if (window.requestAnimationFrame)\n        window.requestAnimationFrame(runCallbacks)\n      else setTimeout(runCallbacks, 66)\n    }\n  }\n\n  // Run the actual callbacks.\n  function runCallbacks() {\n    callbacks.forEach((callback: Function): void => {\n      callback()\n    })\n\n    running = false\n  }\n\n  // Adds callback to loop.\n  function addCallback(callback: Function): void {\n    if (callback) callbacks.push(callback)\n  }\n\n  return {\n    // Public method to add additional callback.\n    add: (callback: Function) => {\n      if (!callbacks.length) window.addEventListener('resize', resize)\n\n      addCallback(callback)\n    },\n  }\n}\n","import { Player } from '../player'\nimport { getMockPlayerAction } from '../utils'\n\nexport enum BoardPiece {\n  EMPTY,\n  PLAYER_1,\n  PLAYER_2,\n  DRAW,\n}\nexport class BoardBase {\n  static readonly ROWS: number = 6\n  static readonly COLUMNS: number = 7\n  static readonly PLAYER_1_COLOR: string = '#ef453b'\n  static readonly PLAYER_2_COLOR: string = '#0059ff'\n  static readonly PIECE_STROKE_STYLE: string = 'black'\n  static readonly MASK_COLOR: string = '#d8d8d8'\n  static CANVAS_HEIGHT: number\n  static CANVAS_WIDTH: number\n  static PIECE_RADIUS: number\n  static MASK_X_BEGIN: number\n  static MASK_Y_BEGIN: number\n  static MESSAGE_WIDTH: number\n  static MESSAGE_X_BEGIN: number\n  static MESSAGE_Y_BEGIN: number\n  static SCALE: number\n\n  map: Array<Array<number>>\n  protected winnerBoardPiece: BoardPiece\n\n  constructor() {\n    this.map = []\n    this.winnerBoardPiece = BoardPiece.EMPTY\n    this.initConstants()\n    this.reset()\n  }\n\n  reset() {\n    this.map = []\n    for (let i = 0; i < BoardBase.ROWS; i++) {\n      this.map.push([])\n      for (let j = 0; j < BoardBase.COLUMNS; j++) {\n        this.map[i].push(BoardPiece.EMPTY)\n      }\n    }\n    this.winnerBoardPiece = BoardPiece.EMPTY\n  }\n\n  initConstants() {\n    BoardBase.CANVAS_HEIGHT = BoardBase.SCALE * 480\n    BoardBase.CANVAS_WIDTH = BoardBase.SCALE * 640\n    BoardBase.PIECE_RADIUS = BoardBase.SCALE * 25\n    BoardBase.MASK_X_BEGIN =\n      Math.max(\n        0,\n        BoardBase.CANVAS_WIDTH -\n          (3 * BoardBase.COLUMNS + 1) * BoardBase.PIECE_RADIUS\n      ) / 2\n    BoardBase.MASK_Y_BEGIN =\n      Math.max(\n        0,\n        BoardBase.CANVAS_HEIGHT -\n          (3 * BoardBase.ROWS + 1) * BoardBase.PIECE_RADIUS\n      ) / 2\n    BoardBase.MESSAGE_WIDTH = BoardBase.SCALE * 400\n    BoardBase.MESSAGE_X_BEGIN =\n      (BoardBase.CANVAS_WIDTH - BoardBase.MESSAGE_WIDTH) / 2\n    BoardBase.MESSAGE_Y_BEGIN = BoardBase.SCALE * 20\n  }\n\n  /**\n   * @returns is the action succesfully applied\n   * @param player current player\n   * @param column the colum in which the player want to drop a piece\n   */\n  async applyPlayerAction(player: Player, column: number): Promise<boolean> {\n    const { success: actionSuccessful, map: nextState } = getMockPlayerAction(\n      this.map,\n      player.boardPiece,\n      column\n    )\n\n    this.map = nextState\n    // this.debug()\n\n    return actionSuccessful\n  }\n\n  debug() {\n    console.log(this.map.map((row) => row.join(' ')).join('\\n'))\n  }\n\n  getWinner(): BoardPiece {\n    if (this.winnerBoardPiece !== BoardPiece.EMPTY) {\n      return this.winnerBoardPiece\n    }\n    const direction = [\n      [0, -1],\n      [0, 1],\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ]\n    const isWinningSequence = (\n      i: number,\n      j: number,\n      playerPiece: BoardPiece,\n      dir: Array<number>,\n      count: number\n    ): boolean => {\n      if (count >= 4) {\n        return true\n      }\n      if (\n        i < 0 ||\n        j < 0 ||\n        i >= BoardBase.ROWS ||\n        j >= BoardBase.COLUMNS ||\n        this.map[i][j] !== playerPiece\n      ) {\n        return false\n      }\n      return isWinningSequence(\n        i + dir[0],\n        j + dir[1],\n        playerPiece,\n        dir,\n        count + 1\n      )\n    }\n    let countEmpty = 0\n    for (let i = 0; i < BoardBase.ROWS; i++) {\n      for (let j = 0; j < BoardBase.COLUMNS; j++) {\n        const playerPiece = this.map[i][j]\n        if (playerPiece !== BoardPiece.EMPTY) {\n          for (let k = 0; k < direction.length; k++) {\n            const isWon = isWinningSequence(\n              i + direction[k][0],\n              j + direction[k][1],\n              playerPiece,\n              direction[k],\n              1\n            )\n            if (isWon) {\n              return (this.winnerBoardPiece = playerPiece)\n            }\n          }\n        } else {\n          countEmpty++\n        }\n      }\n    }\n    if (countEmpty === 0) {\n      return (this.winnerBoardPiece = BoardPiece.DRAW)\n    }\n\n    return BoardPiece.EMPTY\n  }\n\n  protected getPlayerColor(boardPiece: BoardPiece): string {\n    switch (boardPiece) {\n      case BoardPiece.PLAYER_1:\n        return BoardBase.PLAYER_1_COLOR\n      case BoardPiece.PLAYER_2:\n        return BoardBase.PLAYER_2_COLOR\n      default:\n        return 'transparent'\n    }\n  }\n}\n","export * from './base'\n","import { Player } from './player'\nimport { BoardBase, BoardPiece } from '../board'\nimport {\n  BIG_POSITIVE_NUMBER,\n  BIG_NEGATIVE_NUMBER,\n  getMockPlayerAction,\n  choose,\n  clone,\n} from '../utils'\n\nexport class PlayerAi extends Player {\n  static readonly MAX_DEPTH = 4\n  private ownBoardPieceValue: number\n  private enemyBoardPiece: BoardPiece\n  constructor(boardPiece: BoardPiece) {\n    super(boardPiece)\n    this.ownBoardPieceValue = this.getBoardPieceValue(boardPiece)\n    this.enemyBoardPiece =\n      boardPiece === BoardPiece.PLAYER_1\n        ? BoardPiece.PLAYER_2\n        : BoardPiece.PLAYER_1\n  }\n  private getBoardPieceValue(boardPiece: BoardPiece): number {\n    return boardPiece === BoardPiece.EMPTY\n      ? 0\n      : boardPiece === this.boardPiece\n      ? 1\n      : -1\n  }\n  private getStateValue(state: Array<Array<number>>): {\n    winnerBoardPiece: BoardPiece\n    chain: number\n  } {\n    let winnerBoardPiece = BoardPiece.EMPTY\n    let chainValue = 0\n    for (let i = 0; i < BoardBase.ROWS; i++) {\n      for (let j = 0; j < BoardBase.COLUMNS; j++) {\n        let tempRight = 0,\n          tempBottom = 0,\n          tempBottomRight = 0,\n          tempTopRight = 0\n        for (let k = 0; k <= 3; k++) {\n          // from (i,j) to right\n          if (j + k < BoardBase.COLUMNS) {\n            tempRight += this.getBoardPieceValue(state[i][j + k])\n          }\n\n          // from (i,j) to bottom\n          if (i + k < BoardBase.ROWS) {\n            tempBottom += this.getBoardPieceValue(state[i + k][j])\n          }\n\n          // from (i,j) to bottom-right\n          if (i + k < BoardBase.ROWS && j + k < BoardBase.COLUMNS) {\n            tempBottomRight += this.getBoardPieceValue(state[i + k][j + k])\n          }\n\n          // from (i,j) to top-right\n          if (i - k >= 0 && j + k < 7) {\n            tempTopRight += this.getBoardPieceValue(state[i - k][j + k])\n          }\n        }\n        chainValue += tempRight * tempRight * tempRight\n        chainValue += tempBottom * tempBottom * tempBottom\n        chainValue += tempBottomRight * tempBottomRight * tempBottomRight\n        chainValue += tempTopRight * tempTopRight * tempTopRight\n\n        if (Math.abs(tempRight) === 4) {\n          winnerBoardPiece =\n            tempRight > 0 ? this.boardPiece : this.enemyBoardPiece\n        } else if (Math.abs(tempBottom) === 4) {\n          winnerBoardPiece =\n            tempBottom > 0 ? this.boardPiece : this.enemyBoardPiece\n        } else if (Math.abs(tempBottomRight) === 4) {\n          winnerBoardPiece =\n            tempBottomRight > 0 ? this.boardPiece : this.enemyBoardPiece\n        } else if (Math.abs(tempTopRight) === 4) {\n          winnerBoardPiece =\n            tempTopRight > 0 ? this.boardPiece : this.enemyBoardPiece\n        }\n      }\n    }\n    return {\n      winnerBoardPiece: winnerBoardPiece,\n      chain: chainValue,\n    }\n  }\n\n  /**\n   * @return transformed value, so the AI could take a \"lower hanging fruit\",\n   *          i.e. a reward in closer future worth more than the same reward in distant future\n   * @param returnValue\n   * @param winnerBoardPiece\n   * @param depth\n   */\n  private transformValues(\n    returnValue: number,\n    winnerBoardPiece: BoardPiece,\n    depth: number\n  ): number {\n    const isWon = winnerBoardPiece === this.boardPiece\n    const isLost = winnerBoardPiece === this.enemyBoardPiece\n\n    // value is slightly higher than BIG_NEGATIVE_NUMBER & lower than BIG_POSITIVE_NUMBER\n    // so that minState(...) and maxState(...) could \"catch\"\" this value and AI take this move\n    // This is just my hypothesis, I haven't tested without it yet.\n    // My point is that this AI implementation is basically a heuristic function :P\n    if (isWon) {\n      returnValue = BIG_POSITIVE_NUMBER - 100\n    } else if (isLost) {\n      returnValue = BIG_NEGATIVE_NUMBER + 100\n    }\n    returnValue -= depth * depth\n    return returnValue\n  }\n  private getMove(\n    state: Array<Array<number>>,\n    depth: number,\n    alpha: number,\n    beta: number\n  ): {\n    value: number\n    move: number\n  } {\n    const stateValue = this.getStateValue(state)\n    const isWon = stateValue.winnerBoardPiece === this.boardPiece\n    const isLost = stateValue.winnerBoardPiece === this.enemyBoardPiece\n\n    if (depth >= PlayerAi.MAX_DEPTH || isWon || isLost) {\n      return {\n        value: this.transformValues(\n          stateValue.chain * this.ownBoardPieceValue,\n          stateValue.winnerBoardPiece,\n          depth\n        ),\n        move: -1, // leaf node\n      }\n    }\n\n    return depth % 2 === 0\n      ? this.minState(state, depth + 1, alpha, beta) // next is enemy's turn\n      : this.maxState(state, depth + 1, alpha, beta) // next is my turn\n  }\n\n  private maxState(\n    state: Array<Array<number>>,\n    depth: number,\n    alpha: number,\n    beta: number\n  ): {\n    value: number\n    move: number\n  } {\n    let value = BIG_NEGATIVE_NUMBER\n    let moveQueue: Array<number> = []\n    for (let column = 0; column < BoardBase.COLUMNS; column++) {\n      const { success: actionSuccessful, map: nextState } = getMockPlayerAction(\n        state,\n        this.boardPiece,\n        column\n      )\n      if (actionSuccessful) {\n        const { value: nextValue } = this.getMove(nextState, depth, alpha, beta)\n        if (nextValue > value) {\n          value = nextValue\n          moveQueue = [column]\n        } else if (nextValue === value) {\n          moveQueue.push(column)\n        }\n\n        // alpha-beta pruning\n        if (value > beta) {\n          return {\n            value: value,\n            move: choose(moveQueue),\n          }\n        }\n        alpha = Math.max(alpha, value)\n      }\n    }\n\n    return {\n      value: value,\n      move: choose(moveQueue),\n    }\n  }\n  private minState(\n    state: Array<Array<number>>,\n    depth: number,\n    alpha: number,\n    beta: number\n  ): {\n    value: number\n    move: number\n  } {\n    let value = BIG_POSITIVE_NUMBER\n    let moveQueue: Array<number> = []\n    for (let column = 0; column < BoardBase.COLUMNS; column++) {\n      const { success: actionSuccessful, map: nextState } = getMockPlayerAction(\n        state,\n        this.enemyBoardPiece,\n        column\n      )\n      if (actionSuccessful) {\n        const { value: nextValue } = this.getMove(nextState, depth, alpha, beta)\n        if (nextValue < value) {\n          value = nextValue\n          moveQueue = [column]\n        } else if (nextValue === value) {\n          moveQueue.push(column)\n        }\n\n        // alpha-beta pruning\n        if (value < alpha) {\n          return {\n            value: value,\n            move: choose(moveQueue),\n          }\n        }\n        beta = Math.min(beta, value)\n      }\n    }\n    return {\n      value: value,\n      move: choose(moveQueue),\n    }\n  }\n\n  async getAction(board: BoardBase): Promise<number> {\n    const state = clone(board.map)\n    const action = this.maxState(\n      state,\n      0,\n      BIG_NEGATIVE_NUMBER,\n      BIG_POSITIVE_NUMBER\n    )\n    console.log(\n      `AI ${this.boardPiece} choose column ${action.move} with value of ${action.value}`\n    )\n    return action.move\n  }\n}\n","import { Player } from './player'\nimport { BoardBase, BoardPiece } from '../board'\n\nexport class PlayerHuman extends Player {\n  clickPromiseResolver: null | ((column: number) => void)\n\n  constructor(boardPiece: BoardPiece) {\n    super(boardPiece)\n    this.clickPromiseResolver = null\n  }\n\n  doAction(column: number) {\n    if (\n      this.clickPromiseResolver &&\n      0 <= column &&\n      column < BoardBase.COLUMNS\n    ) {\n      this.clickPromiseResolver(column)\n    }\n  }\n\n  getAction(board: BoardBase): Promise<number> {\n    return new Promise<number>((r) => (this.clickPromiseResolver = r))\n  }\n}\n","import { Player } from './player'\nimport { BoardBase, BoardPiece } from '../board'\n\nexport class PlayerShadow extends Player {\n  actionPromiseResolver: null | ((column: number) => void)\n\n  constructor(boardPiece: BoardPiece) {\n    super(boardPiece)\n    this.actionPromiseResolver = null\n  }\n\n  doAction(column: number) {\n    if (\n      this.actionPromiseResolver &&\n      0 <= column &&\n      column < BoardBase.COLUMNS\n    ) {\n      this.actionPromiseResolver(column)\n    }\n  }\n\n  getAction(board: BoardBase): Promise<number> {\n    return new Promise<number>((r) => (this.actionPromiseResolver = r))\n  }\n}\n","export * from './player'\nexport * from './player-ai'\nexport * from './player-human'\nexport * from './player-shadow'\n","import { BoardPiece, BoardBase } from '../board'\nimport { Player } from '../player'\n\nexport abstract class GameBase<P extends Player = Player> {\n  board: BoardBase\n  players: Array<P>\n  currentPlayerId: number\n  isMoveAllowed: boolean = false\n  isGameWon: boolean = false\n\n  constructor(players: Array<P>, board: BoardBase) {\n    this.board = board\n    this.players = players\n    this.currentPlayerId = 0\n    this.reset()\n  }\n  reset() {\n    this.isMoveAllowed = false\n    this.isGameWon = false\n    this.board.reset()\n    // this.board.debug()\n  }\n\n  async start() {\n    this.isMoveAllowed = true\n    while (!this.isGameWon) {\n      await this.move()\n      const winner = this.board.getWinner()\n      if (winner !== BoardPiece.EMPTY) {\n        console.log('[GameBase] Game over: winner is player ', winner)\n        this.isGameWon = true\n        this.isMoveAllowed = false\n        this.announceWinner(winner)\n        break\n      }\n    }\n  }\n  async move() {\n    if (!this.isMoveAllowed) {\n      return\n    }\n    const currentPlayer = this.players[this.currentPlayerId]\n    let actionSuccesful = false\n    while (!actionSuccesful) {\n      this.waitingForMove()\n      const action = await currentPlayer.getAction(this.board)\n      this.isMoveAllowed = false\n      this.beforeMoveApplied(action)\n      actionSuccesful = await this.board.applyPlayerAction(\n        currentPlayer,\n        action\n      )\n      this.isMoveAllowed = true\n      if (!actionSuccesful) {\n        console.log('Move not allowed! Try again.')\n      } else {\n        this.afterMove(action)\n      }\n    }\n    this.currentPlayerId = this.getNextPlayer()\n  }\n  abstract waitingForMove(): void\n  abstract beforeMoveApplied(action: number): void\n  abstract afterMove(action: number): void\n\n  announceWinner(winnerPiece: BoardPiece) {\n    const winner = {\n      [BoardPiece.DRAW]: 'draw',\n      [BoardPiece.PLAYER_1]: 'Player 1',\n      [BoardPiece.PLAYER_2]: 'Player 2',\n      [BoardPiece.EMPTY]: 'none',\n    }[winnerPiece]\n    console.log('[GameBase] Game over: winner is ', winner, winnerPiece)\n  }\n\n  private getNextPlayer() {\n    return this.currentPlayerId === 0 ? 1 : 0\n  }\n}\n","import { BoardPiece } from '../../board'\n\nexport enum MESSAGE_TYPE {\n  NEW_PLAYER_CONNECTION_REQUEST = 'NEW_PLAYER_CONNECTION_REQUEST',\n  NEW_PLAYER_CONNECTION_OK = 'NEW_PLAYER_CONNECTION_OK',\n\n  NEW_MATCH_REQUEST = 'NEW_MATCH_REQUEST',\n  NEW_MATCH_OK = 'NEW_MATCH_OK',\n\n  GAME_READY = 'GAME_READY',\n  GAME_ENDED = 'GAME_ENDED',\n  GAME_RESET = 'GAME_RESET',\n\n  CONNECT_MATCH_REQUEST = 'CONNECT_MATCH_REQUEST',\n  CONNECT_MATCH_OK = 'CONNECT_MATCH_OK',\n  CONNECT_MATCH_FAIL = 'CONNECT_MATCH_FAIL',\n\n  HUNG_UP = 'HUNG_UP',\n  OTHER_PLAYER_HUNGUP = 'OTHER_PLAYER_HUNGUP',\n\n  MOVE_MAIN = 'MOVE_MAIN',\n  MOVE_SHADOW = 'MOVE_SHADOW',\n}\n\nexport type PlayerId = string\n\nexport type MatchId = string\n\nexport type GameOnlineMessage =\n  | { type: 'NEW_PLAYER_CONNECTION_REQUEST'; payload: {} }\n  | {\n      type: 'NEW_PLAYER_CONNECTION_OK'\n      payload: { playerId: PlayerId }\n    }\n  | { type: 'NEW_MATCH_REQUEST'; payload: { playerId: PlayerId } }\n  | { type: 'NEW_MATCH_OK'; payload: { matchId: MatchId } }\n  | { type: 'GAME_READY'; payload: { matchId: MatchId } }\n  | {\n      type: 'GAME_ENDED'\n      payload: {\n        winnerBoardPiece: BoardPiece\n        matchId: MatchId\n        gameWinnerPlayerId: PlayerId\n      }\n    }\n  | { type: 'GAME_RESET'; payload: { matchId: MatchId } }\n  | {\n      type: 'CONNECT_MATCH_REQUEST'\n      payload: { playerId: PlayerId; matchId: MatchId }\n    }\n  | {\n      type: 'CONNECT_MATCH_OK'\n      payload: { matchId: MatchId; playerId: PlayerId }\n    }\n  | {\n      type: 'CONNECT_MATCH_FAIL'\n      payload: { matchId: MatchId; playerId: PlayerId }\n    }\n  | { type: 'HUNG_UP'; payload: {} }\n  | { type: 'OTHER_PLAYER_HUNGUP'; payload: {} }\n  | { type: 'MOVE_MAIN'; payload: { column: number } }\n  | { type: 'MOVE_SHADOW'; payload: { column: number } }\n\nexport function constructMessage(\n  type: MESSAGE_TYPE,\n  payload?: GameOnlineMessage['payload']\n): string {\n  console.log('[ws] send: ', type, payload)\n  return JSON.stringify({\n    type,\n    payload: payload || {},\n  })\n}\nexport function parseMessage(message: string): GameOnlineMessage {\n  const parsedMessage = JSON.parse(message)\n  console.log('[ws] receive: ', parsedMessage)\n  return parsedMessage\n}\n","export * from './game-base'\nexport * from './game-online/shared'\n","export * from './player'\nexport * from './utils'\nexport * from './board'\nexport * from './game'\n"]}