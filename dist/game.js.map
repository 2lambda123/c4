{"version":3,"sources":["C:/Program Files (x86)/Nodist/bin/node_modules/browserify/node_modules/browser-pack/_prelude.js","dist/js/board.js","dist/js/game.js","dist/js/player-ai.js","dist/js/player.js","dist/js/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","apply","__generator","body","verb","v","op","TypeError","_","y","label","ops","pop","trys","push","sent","throw","return","Object","defineProperty","BoardPiece","utils_1","Board","canvas","map","row","j","column","EMPTY","context","getContext","winnerBoardPiece","prototype","applyPlayerAction","player","isColumnEverFilled","_a","animateAction","boardPiece","debug","Utils","animationFrame","render","console","log","join","getWinner","_this","direction","isWinningSequence","playerPiece","dir","count","countEmpty","k","isWon","DRAW","announceWinner","message","drawText","x","maxWidth","getPlayerColor","PLAYER_1","PLAYER_2","newRow","fillStyle","currentY","doAnimation","clearCanvas","drawCircle","strokeStyle","drawMask","board_1","player_ai_1","Game","board","document","querySelector","players","PlayerAi","currentPlayerId","isMoveAllowed","isGameWon","start","winner","move","currentPlayer","actionSuccesful","action","getAction","getNextPlayer","game","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","create","player_1","_super","ownBoardPieceValue","getBoardPieceValue","enemyBoardPiece","getStateValue","state","chainValue","tempRight","tempBottom","tempBottomRight","tempTopRight","Math","abs","chain","transformValues","returnValue","depth","isLost","BIG_POSITIVE_NUMBER","BIG_NEGATIVE_NUMBER","getMove","alpha","beta","stateValue","MAX_DEPTH","minState","maxState","moveQueue","getMockPlayerAction","actionSuccessful","success","nextState","_b","nextValue","choose","max","min","clone","Player","_c","_d","_e","_f","font","_g","save","fillText","restore","beginPath","arc","PI","fill","rect","clearRect","width","height","isCoordOnColumn","coord","columnXBegin","radius","getColumnFromCoord","getRandomColumnNumber","floor","random","choice","promise","window","requestAnimationFrame","array","arr","slice","clonedMap","pow"],"mappings":"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","file":"game.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nvar BoardPiece;\n(function (BoardPiece) {\n    BoardPiece[BoardPiece[\"EMPTY\"] = 0] = \"EMPTY\";\n    BoardPiece[BoardPiece[\"PLAYER_1\"] = 1] = \"PLAYER_1\";\n    BoardPiece[BoardPiece[\"PLAYER_2\"] = 2] = \"PLAYER_2\";\n    BoardPiece[BoardPiece[\"DRAW\"] = 3] = \"DRAW\";\n})(BoardPiece = exports.BoardPiece || (exports.BoardPiece = {}));\nvar Board = (function () {\n    function Board(canvas) {\n        this.map = [];\n        for (var i = 0; i < Board.row; i++) {\n            this.map.push([]);\n            for (var j = 0; j < Board.column; j++) {\n                this.map[i].push(BoardPiece.EMPTY);\n            }\n        }\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d');\n        this.winnerBoardPiece = BoardPiece.EMPTY;\n    }\n    Board.prototype.applyPlayerAction = function (player, column) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isColumnEverFilled, row, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.map[0][column] !== BoardPiece.EMPTY || column < 0 || column >= Board.column) {\n                            return [2 /*return*/, false];\n                        }\n                        isColumnEverFilled = false;\n                        row = 0;\n                        for (i = 0; i < Board.row - 1; i++) {\n                            if (this.map[i + 1][column] !== BoardPiece.EMPTY) {\n                                isColumnEverFilled = true;\n                                row = i;\n                                break;\n                            }\n                        }\n                        if (!isColumnEverFilled) {\n                            row = Board.row - 1;\n                        }\n                        return [4 /*yield*/, this.animateAction(row, column, player.boardPiece)];\n                    case 1:\n                        _a.sent();\n                        this.map[row][column] = player.boardPiece;\n                        this.debug();\n                        return [4 /*yield*/, utils_1.Utils.animationFrame()];\n                    case 2:\n                        _a.sent();\n                        this.render();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    Board.prototype.debug = function () {\n        console.log(this.map.map(function (row) { return row.join(' '); }).join('\\n'));\n    };\n    Board.prototype.getWinner = function () {\n        var _this = this;\n        if (this.winnerBoardPiece !== BoardPiece.EMPTY) {\n            return this.winnerBoardPiece;\n        }\n        var direction = [\n            [0, -1],\n            [0, 1],\n            [-1, -1],\n            [-1, 0],\n            [-1, 1],\n            [1, -1],\n            [1, 0],\n            [1, 1]\n        ];\n        var isWinningSequence = function (i, j, playerPiece, dir, count) {\n            if (count >= 4) {\n                return true;\n            }\n            if (i < 0 || j < 0 || i >= Board.row || j >= Board.column || _this.map[i][j] !== playerPiece) {\n                return false;\n            }\n            return isWinningSequence(i + dir[0], j + dir[1], playerPiece, dir, count + 1);\n        };\n        var countEmpty = 0;\n        for (var i = 0; i < Board.row; i++) {\n            for (var j = 0; j < Board.column; j++) {\n                var playerPiece = this.map[i][j];\n                if (playerPiece !== BoardPiece.EMPTY) {\n                    for (var k = 0; k < direction.length; k++) {\n                        var isWon = isWinningSequence(i + direction[k][0], j + direction[k][1], playerPiece, direction[k], 1);\n                        if (isWon) {\n                            return this.winnerBoardPiece = playerPiece;\n                        }\n                    }\n                }\n                else {\n                    countEmpty++;\n                }\n            }\n        }\n        if (countEmpty === 0) {\n            return this.winnerBoardPiece = BoardPiece.DRAW;\n        }\n        return BoardPiece.EMPTY;\n    };\n    Board.prototype.announceWinner = function () {\n        if (this.winnerBoardPiece === BoardPiece.EMPTY) {\n            return;\n        }\n        var message = 'Thank you for playing - ';\n        if (this.winnerBoardPiece === BoardPiece.DRAW) {\n            message += \"It's a draw\";\n        }\n        else {\n            message += \"Player \" + this.winnerBoardPiece + \" wins\";\n        }\n        message += \" - Click to reset\";\n        utils_1.Utils.drawText(this.context, {\n            message: message,\n            x: 150,\n            y: 20,\n            maxWidth: 400\n        });\n    };\n    Board.prototype.getPlayerColor = function (boardPiece) {\n        switch (boardPiece) {\n            case BoardPiece.PLAYER_1: return '#ff4136';\n            case BoardPiece.PLAYER_2: return '#0074d9';\n            default: return 'transparent';\n        }\n    };\n    Board.prototype.animateAction = function (newRow, column, boardPiece) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var fillStyle, currentY, doAnimation;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fillStyle = this.getPlayerColor(boardPiece);\n                        currentY = 0;\n                        doAnimation = function () { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                utils_1.Utils.clearCanvas(this);\n                                utils_1.Utils.drawCircle(this.context, {\n                                    x: 75 * column + 100,\n                                    y: currentY + 50,\n                                    r: 25,\n                                    fillStyle: fillStyle,\n                                    strokeStyle: 'black'\n                                });\n                                this.render();\n                                currentY += 25;\n                                return [2 /*return*/];\n                            });\n                        }); };\n                        _a.label = 1;\n                    case 1:\n                        if (!(newRow * 75 >= currentY)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, utils_1.Utils.animationFrame()];\n                    case 2:\n                        _a.sent();\n                        doAnimation();\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ;\n    Board.prototype.render = function () {\n        utils_1.Utils.drawMask(this);\n        var x, y;\n        for (y = 0; y < Board.row; y++) {\n            for (x = 0; x < Board.column; x++) {\n                utils_1.Utils.drawCircle(this.context, {\n                    x: 75 * x + 100,\n                    y: 75 * y + 50,\n                    r: 25,\n                    fillStyle: this.getPlayerColor(this.map[y][x]),\n                    strokeStyle: 'black'\n                });\n            }\n        }\n    };\n    return Board;\n}());\nBoard.row = 6;\nBoard.column = 7;\nexports.Board = Board;\n\n//# sourceMappingURL=board.js.map\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board_1 = require(\"./board\");\nvar player_ai_1 = require(\"./player-ai\");\nvar Game = (function () {\n    function Game() {\n        this.board = new board_1.Board(document.querySelector('canvas'));\n        this.players = [\n            new player_ai_1.PlayerAi(board_1.BoardPiece.PLAYER_1, this.board),\n            new player_ai_1.PlayerAi(board_1.BoardPiece.PLAYER_2, this.board)\n        ];\n        this.currentPlayerId = 0;\n        this.isMoveAllowed = false;\n        this.isGameWon = false;\n        this.board.render();\n        this.board.debug();\n    }\n    Game.prototype.start = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var winner;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.isMoveAllowed = true;\n                        _a.label = 1;\n                    case 1:\n                        if (!!this.isGameWon) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.move()];\n                    case 2:\n                        _a.sent();\n                        winner = this.board.getWinner();\n                        if (winner !== board_1.BoardPiece.EMPTY) {\n                            console.log('Game over: winner is player ', winner);\n                            this.isGameWon = true;\n                            this.isMoveAllowed = false;\n                            this.board.announceWinner();\n                            return [3 /*break*/, 3];\n                        }\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Game.prototype.move = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentPlayer, actionSuccesful, action;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isMoveAllowed) {\n                            return [2 /*return*/];\n                        }\n                        currentPlayer = this.players[this.currentPlayerId];\n                        actionSuccesful = false;\n                        _a.label = 1;\n                    case 1:\n                        if (!!actionSuccesful) return [3 /*break*/, 4];\n                        return [4 /*yield*/, currentPlayer.getAction(this.board)];\n                    case 2:\n                        action = _a.sent();\n                        this.isMoveAllowed = false;\n                        return [4 /*yield*/, this.board.applyPlayerAction(currentPlayer, action)];\n                    case 3:\n                        actionSuccesful = _a.sent();\n                        this.isMoveAllowed = true;\n                        if (!actionSuccesful) {\n                            console.log('Move not allowed! Try again.');\n                        }\n                        return [3 /*break*/, 1];\n                    case 4:\n                        this.currentPlayerId = this.getNextPlayer();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Game.prototype.getNextPlayer = function () {\n        return (this.currentPlayerId === 0) ? 1 : 0;\n    };\n    return Game;\n}());\nexports.Game = Game;\nvar game = new Game();\ngame.start();\n\n//# sourceMappingURL=game.js.map\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar player_1 = require(\"./player\");\nvar board_1 = require(\"./board\");\nvar utils_1 = require(\"./utils\");\nvar PlayerAi = (function (_super) {\n    __extends(PlayerAi, _super);\n    function PlayerAi(boardPiece, board) {\n        var _this = _super.call(this, boardPiece, board) || this;\n        _this.ownBoardPieceValue = _this.getBoardPieceValue(boardPiece);\n        _this.enemyBoardPiece = (boardPiece === board_1.BoardPiece.PLAYER_1) ? board_1.BoardPiece.PLAYER_2 : board_1.BoardPiece.PLAYER_1;\n        return _this;\n    }\n    PlayerAi.prototype.getBoardPieceValue = function (boardPiece) {\n        return (boardPiece === board_1.BoardPiece.EMPTY)\n            ? 0\n            : boardPiece === this.boardPiece\n                ? 1\n                : -1;\n    };\n    PlayerAi.prototype.getStateValue = function (state) {\n        var winnerBoardPiece = board_1.BoardPiece.EMPTY;\n        var chainValue = 0;\n        for (var i = 0; i < board_1.Board.row; i++) {\n            for (var j = 0; j < board_1.Board.column; j++) {\n                var tempRight = 0, tempBottom = 0, tempBottomRight = 0, tempTopRight = 0;\n                for (var k = 0; k <= 3; k++) {\n                    if (j + k < board_1.Board.column) {\n                        tempRight += this.getBoardPieceValue(state[i][j + k]);\n                    }\n                    if (i + k < board_1.Board.row) {\n                        tempBottom += this.getBoardPieceValue(state[i + k][j]);\n                    }\n                    if (i + k < board_1.Board.row && j + k < board_1.Board.column) {\n                        tempBottomRight += this.getBoardPieceValue(state[i + k][j + k]);\n                    }\n                    if (i - k >= 0 && j + k < 7) {\n                        tempTopRight += this.getBoardPieceValue(state[i - k][j + k]);\n                    }\n                }\n                chainValue += tempRight * tempRight * tempRight;\n                chainValue += tempBottom * tempBottom * tempBottom;\n                chainValue += tempBottomRight * tempBottomRight * tempBottomRight;\n                chainValue += tempTopRight * tempTopRight * tempTopRight;\n                if (Math.abs(tempRight) === 4) {\n                    winnerBoardPiece = tempRight > 0 ? this.boardPiece : this.enemyBoardPiece;\n                }\n                else if (Math.abs(tempBottom) === 4) {\n                    winnerBoardPiece = tempBottom > 0 ? this.boardPiece : this.enemyBoardPiece;\n                }\n                else if (Math.abs(tempBottomRight) === 4) {\n                    winnerBoardPiece = tempBottomRight > 0 ? this.boardPiece : this.enemyBoardPiece;\n                }\n                else if (Math.abs(tempTopRight) === 4) {\n                    winnerBoardPiece = tempTopRight > 0 ? this.boardPiece : this.enemyBoardPiece;\n                }\n            }\n        }\n        return {\n            winnerBoardPiece: winnerBoardPiece,\n            chain: chainValue\n        };\n    };\n    PlayerAi.prototype.transformValues = function (returnValue, winnerBoardPiece, depth) {\n        var isWon = winnerBoardPiece === this.boardPiece;\n        var isLost = winnerBoardPiece === this.enemyBoardPiece;\n        if (isWon) {\n            returnValue = utils_1.Utils.BIG_POSITIVE_NUMBER - 100;\n        }\n        else if (isLost) {\n            returnValue = utils_1.Utils.BIG_NEGATIVE_NUMBER + 100;\n        }\n        returnValue -= depth * depth;\n        return returnValue;\n    };\n    PlayerAi.prototype.getMove = function (state, depth, alpha, beta) {\n        var stateValue = this.getStateValue(state);\n        var isWon = stateValue.winnerBoardPiece === this.boardPiece;\n        var isLost = stateValue.winnerBoardPiece === this.enemyBoardPiece;\n        if (depth >= PlayerAi.MAX_DEPTH || isWon || isLost) {\n            return {\n                value: this.transformValues(stateValue.chain * this.ownBoardPieceValue, stateValue.winnerBoardPiece, depth),\n                move: -1\n            };\n        }\n        return (depth % 2 === 0)\n            ? this.minState(state, depth + 1, alpha, beta)\n            : this.maxState(state, depth + 1, alpha, beta);\n    };\n    PlayerAi.prototype.maxState = function (state, depth, alpha, beta) {\n        var value = utils_1.Utils.BIG_NEGATIVE_NUMBER;\n        var moveQueue = [];\n        for (var column = 0; column < board_1.Board.column; column++) {\n            var _a = utils_1.Utils.getMockPlayerAction(state, this.boardPiece, column), actionSuccessful = _a.success, nextState = _a.map;\n            if (actionSuccessful) {\n                var _b = this.getMove(nextState, depth, alpha, beta), nextValue = _b.value, nextMove = _b.move;\n                if (nextValue > value) {\n                    value = nextValue;\n                    moveQueue = [column];\n                }\n                else if (nextValue === value) {\n                    moveQueue.push(column);\n                }\n                if (value > beta) {\n                    return {\n                        value: value,\n                        move: utils_1.Utils.choose(moveQueue)\n                    };\n                }\n                alpha = Math.max(alpha, value);\n            }\n        }\n        return {\n            value: value,\n            move: utils_1.Utils.choose(moveQueue)\n        };\n    };\n    PlayerAi.prototype.minState = function (state, depth, alpha, beta) {\n        var value = utils_1.Utils.BIG_POSITIVE_NUMBER;\n        var moveQueue = [];\n        for (var column = 0; column < board_1.Board.column; column++) {\n            var _a = utils_1.Utils.getMockPlayerAction(state, this.enemyBoardPiece, column), actionSuccessful = _a.success, nextState = _a.map;\n            if (actionSuccessful) {\n                var _b = this.getMove(nextState, depth, alpha, beta), nextValue = _b.value, nextMove = _b.move;\n                if (nextValue < value) {\n                    value = nextValue;\n                    moveQueue = [column];\n                }\n                else if (nextValue === value) {\n                    moveQueue.push(column);\n                }\n                if (value < alpha) {\n                    return {\n                        value: value,\n                        move: utils_1.Utils.choose(moveQueue)\n                    };\n                }\n                beta = Math.min(beta, value);\n            }\n        }\n        return {\n            value: value,\n            move: utils_1.Utils.choose(moveQueue)\n        };\n    };\n    PlayerAi.prototype.getAction = function (board) {\n        return __awaiter(this, void 0, void 0, function () {\n            var state, action;\n            return __generator(this, function (_a) {\n                state = utils_1.Utils.clone(board.map);\n                action = this.maxState(state, 0, utils_1.Utils.BIG_NEGATIVE_NUMBER, utils_1.Utils.BIG_POSITIVE_NUMBER);\n                console.log(\"AI \" + this.boardPiece + \" choose column \" + action.move + \" with value of \" + action.value);\n                return [2 /*return*/, action.move];\n            });\n        });\n    };\n    return PlayerAi;\n}(player_1.Player));\nPlayerAi.MAX_DEPTH = 4;\nexports.PlayerAi = PlayerAi;\n\n//# sourceMappingURL=player-ai.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Player = (function () {\n    function Player(boardPiece, board) {\n        this.boardPiece = boardPiece;\n    }\n    return Player;\n}());\nexports.Player = Player;\n\n//# sourceMappingURL=player.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board_1 = require(\"./board\");\nvar Utils = (function () {\n    function Utils() {\n    }\n    Utils.drawText = function (context, _a) {\n        var _b = _a.message, message = _b === void 0 ? '' : _b, _c = _a.x, x = _c === void 0 ? 0 : _c, _d = _a.y, y = _d === void 0 ? 0 : _d, _e = _a.fillStyle, fillStyle = _e === void 0 ? '#111' : _e, _f = _a.font, font = _f === void 0 ? '12pt sans-serif' : _f, _g = _a.maxWidth, maxWidth = _g === void 0 ? Utils.BIG_POSITIVE_NUMBER : _g;\n        context.save();\n        context.font = font;\n        context.fillStyle = fillStyle;\n        context.fillText(message, x, y, maxWidth);\n        context.restore();\n    };\n    Utils.drawCircle = function (context, _a) {\n        var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.r, r = _d === void 0 ? 0 : _d, _e = _a.fillStyle, fillStyle = _e === void 0 ? '' : _e, _f = _a.strokeStyle, strokeStyle = _f === void 0 ? '' : _f;\n        context.save();\n        context.fillStyle = fillStyle;\n        context.strokeStyle = strokeStyle;\n        context.beginPath();\n        context.arc(x, y, r, 0, 2 * Math.PI, false);\n        context.fill();\n        context.restore();\n    };\n    Utils.drawMask = function (board) {\n        var context = board.context;\n        context.save();\n        context.fillStyle = '#ddd';\n        context.beginPath();\n        var x, y;\n        for (y = 0; y < board_1.Board.row; y++) {\n            for (x = 0; x < board_1.Board.column; x++) {\n                context.arc(75 * x + 100, 75 * y + 50, 25, 0, 2 * Math.PI);\n                context.rect(75 * x + 150, 75 * y, -100, 100);\n            }\n        }\n        context.fill();\n        context.restore();\n    };\n    Utils.clearCanvas = function (board) {\n        board.context.clearRect(0, 0, board.canvas.width, board.canvas.height);\n    };\n    Utils.isCoordOnColumn = function (coord, columnXBegin, radius) {\n        return ((coord.x - columnXBegin) * (coord.x - columnXBegin) <= radius * radius);\n    };\n    Utils.getColumnFromCoord = function (coord) {\n        for (var i = 0; i < board_1.Board.column; i++) {\n            if (Utils.isCoordOnColumn(coord, 75 * i + 100, 25)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Utils.getRandomColumnNumber = function () {\n        return Math.floor(Math.random() * board_1.Board.column);\n    };\n    Utils.choose = function (choice) {\n        return choice[Math.floor(Math.random() * choice.length)];\n    };\n    Utils.animationFrame = function () {\n        var resolve = null;\n        var promise = new Promise(function (r) { return resolve = r; });\n        window.requestAnimationFrame(resolve);\n        return promise;\n    };\n    Utils.clone = function (array) {\n        var arr = [];\n        for (var i = 0; i < array.length; i++) {\n            arr[i] = array[i].slice();\n        }\n        return arr;\n    };\n    Utils.getMockPlayerAction = function (map, boardPiece, column) {\n        var clonedMap = Utils.clone(map);\n        if (clonedMap[0][column] !== board_1.BoardPiece.EMPTY || column < 0 || column >= board_1.Board.column) {\n            return {\n                success: false,\n                map: clonedMap\n            };\n        }\n        var isColumnEverFilled = false;\n        var row = 0;\n        for (var i = 0; i < board_1.Board.row - 1; i++) {\n            if (clonedMap[i + 1][column] !== board_1.BoardPiece.EMPTY) {\n                isColumnEverFilled = true;\n                row = i;\n                break;\n            }\n        }\n        if (!isColumnEverFilled) {\n            row = board_1.Board.row - 1;\n        }\n        clonedMap[row][column] = boardPiece;\n        return {\n            success: true,\n            map: clonedMap\n        };\n    };\n    return Utils;\n}());\nUtils.BIG_POSITIVE_NUMBER = Math.pow(10, 9) + 7;\nUtils.BIG_NEGATIVE_NUMBER = -Utils.BIG_POSITIVE_NUMBER;\nexports.Utils = Utils;\n\n//# sourceMappingURL=utils.js.map\n"]}