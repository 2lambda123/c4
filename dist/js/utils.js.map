{"version":3,"sources":["utils.ts"],"names":[],"mappings":";;AAEA;IAAA;IA2CA,CAAC;IA1CQ,gBAAU,GAAjB,UAAkB,OAAiC,EAAE,EAA+C;YAA7C,SAAK,EAAL,0BAAK,EAAE,SAAK,EAAL,0BAAK,EAAE,SAAK,EAAL,0BAAK,EAAE,YAAS,EAAT,8BAAS,EAAE,cAAW,EAAX,gCAAW;QAChG,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QACzB,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;QAC7B,OAAO,CAAC,SAAS,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC5C,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;IAOM,cAAQ,GAAf,UAAgB,KAAY;QAC1B,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC;QAC3B,OAAO,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC,EAAE,CAAC,CAAC;QACT,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC3D,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;QACD,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;IAEM,iBAAW,GAAlB,UAAmB,KAAY;QAC7B,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACzE,CAAC;IAEM,qBAAe,GAAtB,UAAuB,KAA+B,EAAE,CAAS,EAAE,MAAc;QAC/E,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC;IAC5D,CAAC;IAEM,2BAAqB,GAA5B,UAA6B,KAAY;QACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IACH,YAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,sBAAK","file":"utils.js","sourcesContent":["import { Board } from './board';\r\n\r\nexport class Utils {\r\n  static drawCircle(context: CanvasRenderingContext2D, { x = 0, y = 0, r = 0, fill = '', stroke = '' }) {\r\n    context.save();\r\n    context.fillStyle = fill;\r\n    context.strokeStyle = stroke;\r\n    context.beginPath();\r\n    context.arc(x, y, r, 0, 2 * Math.PI, false);\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n  /**\r\n   * @see http://stackoverflow.com/a/11770000/917957\r\n   * @static\r\n   * @param context Canvas 2D Context\r\n   * @param board   current board\r\n   */\r\n  static drawMask(board: Board) {\r\n    const context = board.context;\r\n    context.save();\r\n    context.fillStyle = '#ddd';\r\n    context.beginPath();\r\n    let x, y;\r\n    for (y = 0; y < board.row; y++) {\r\n      for (x = 0; x < board.column; x++) {\r\n        context.arc(75 * x + 100, 75 * y + 50, 25, 0, 2 * Math.PI);\r\n        context.rect(75 * x + 150, 75 * y, -100, 100);\r\n      }\r\n    }\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n\r\n  static clearCanvas(board: Board) {\r\n    board.context.clearRect(0, 0, board.canvas.width, board.canvas.height);\r\n  }\r\n\r\n  static isCoordOnColumn(coord: { x: number, y: number }, x: number, radius: number): boolean {\r\n    return ((coord.x - x) * (coord.x - x) <= radius * radius);\r\n  }\r\n\r\n  static getRandomColumnNumber(board: Board): number {\r\n    return Math.floor(Math.random() * board.column);\r\n  }\r\n}"]}