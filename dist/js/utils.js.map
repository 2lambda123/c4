{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { Board, BoardPiece } from './board';\r\n\r\nexport class Utils {\r\n  static BIG_POSITIVE_NUMBER = 10 ** 9 + 7;\r\n  static BIG_NEGATIVE_NUMBER = -Utils.BIG_POSITIVE_NUMBER;\r\n\r\n  static drawCircle(context: CanvasRenderingContext2D, { x = 0, y = 0, r = 0, fill = '', stroke = '' }) {\r\n    context.save();\r\n    context.fillStyle = fill;\r\n    context.strokeStyle = stroke;\r\n    context.beginPath();\r\n    context.arc(x, y, r, 0, 2 * Math.PI, false);\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n  /**\r\n   * @see http://stackoverflow.com/a/11770000/917957\r\n   * @static\r\n   * @param context Canvas 2D Context\r\n   * @param board   current board\r\n   */\r\n  static drawMask(board: Board) {\r\n    const context = board.context;\r\n    context.save();\r\n    context.fillStyle = '#ddd';\r\n    context.beginPath();\r\n    let x, y;\r\n    for (y = 0; y < Board.row; y++) {\r\n      for (x = 0; x < Board.column; x++) {\r\n        context.arc(75 * x + 100, 75 * y + 50, 25, 0, 2 * Math.PI);\r\n        context.rect(75 * x + 150, 75 * y, -100, 100);\r\n      }\r\n    }\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n\r\n  static clearCanvas(board: Board) {\r\n    board.context.clearRect(0, 0, board.canvas.width, board.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param coord Coordinate of point to be checked\r\n   * @param columnXBegin X-Coordinate of N-th column\r\n   * @param radius Radius of a piece\r\n   */\r\n  static isCoordOnColumn(coord: { x: number, y: number }, columnXBegin: number, radius: number): boolean {\r\n    return ((coord.x - columnXBegin) * (coord.x - columnXBegin) <= radius * radius);\r\n  }\r\n\r\n  static getColumnFromCoord(coord: { x: number, y: number }) {\r\n    for (let i = 0; i < Board.column; i++) {\r\n      if (Utils.isCoordOnColumn(coord, 75 * i + 100, 25)) {\r\n        return i\r\n      }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  static getRandomColumnNumber(): number {\r\n    return Math.floor(Math.random() * Board.column);\r\n  }\r\n  static choose(choice: Array<any>): any {\r\n    return choice[Math.floor(Math.random() * choice.length)];\r\n  }\r\n\r\n  /**\r\n   * @see https://esdiscuss.org/topic/promises-async-functions-and-requestanimationframe-together\r\n   */\r\n  static animationFrame() {\r\n    let resolve = null\r\n    const promise = new Promise(r => resolve = r)\r\n    window.requestAnimationFrame(resolve)\r\n    return promise\r\n  }\r\n\r\n  static clone(array: Array<Array<any>>): Array<Array<any>> {\r\n    let arr = []\r\n    for (let i = 0; i < array.length; i++) {\r\n      arr[i] = array[i].slice()\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  static getMockPlayerAction(map: Array<Array<number>>, boardPiece: BoardPiece, column: number): {\r\n    success: boolean,\r\n    map: Array<Array<number>>\r\n  } {\r\n    const clonedMap = Utils.clone(map)\r\n    if (clonedMap[0][column] !== BoardPiece.EMPTY || column < 0 || column >= Board.column) {\r\n      return {\r\n        success: false,\r\n        map: clonedMap\r\n      }\r\n    }\r\n\r\n    let isColumnEverFilled = false;\r\n    let row = 0;\r\n    for (let i = 0; i < Board.row - 1; i++) {\r\n      if (clonedMap[i + 1][column] !== BoardPiece.EMPTY) {\r\n        isColumnEverFilled = true;\r\n        row = i;\r\n        break;\r\n      }\r\n    }\r\n    if (!isColumnEverFilled) {\r\n      row = Board.row - 1;\r\n    }\r\n    clonedMap[row][column] = boardPiece;\r\n\r\n    return {\r\n      success: true,\r\n      map: clonedMap\r\n    }\r\n  }\r\n}\r\n"]}