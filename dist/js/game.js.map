{"version":3,"sources":["game.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAA4C;AAE5C,+CAA6C;AAC7C,yCAAuC;AAEvC;IAOE;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,0BAAW,CAAC,kBAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,oBAAQ,CAAC,kBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzF,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IACK,oBAAK,GAAX;;gBAIU,MAAM;;;;wBAHd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;;6BACnB,CAAC,IAAI,CAAC,SAAS;wBACpB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;wBAAjB,SAAiB,CAAC;iCACH,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;wBACrC,EAAE,CAAC,CAAC,MAAM,KAAK,kBAAU,CAAC,KAAK,CAAC,CAAC,CAAC;4BAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;4BACrB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;4BAC1B,MAAM,kBAAD;wBACP,CAAC;;;;;;KAEJ;IACK,mBAAI,GAAV;;gBAIQ,aAAa,EACf,eAAe;;;;wBAJnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;4BACxB,MAAM,gBAAA;wBACR,CAAC;wCACqB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC;0CAClC,KAAK;;;6BACpB,CAAC,eAAe;wBACN,qBAAM,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;iCAAzC,SAAyC;wBACxD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;wBACT,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,aAAa,EAAE,MAAM,CAAC,EAAA;;wBAA3E,eAAe,GAAG,SAAyD,CAAC;wBAC5E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;;wBAE5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;KAC7C;IACO,4BAAa,GAArB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC;IACH,WAAC;AAAD,CA7CA,AA6CC,IAAA;AA7CY,oBAAI;AA+CjB,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;AACvB,IAAI,CAAC,KAAK,EAAE,CAAA","file":"game.js","sourcesContent":["import { Board, BoardPiece } from './board';\r\nimport { Player } from './player';\r\nimport { PlayerHuman } from './player-human';\r\nimport { PlayerAi } from './player-ai';\r\n\r\nexport class Game {\r\n  board: Board;\r\n  players: Array<Player>;\r\n  currentPlayerId: number;\r\n  isMoveAllowed: boolean;\r\n  isGameWon: boolean;\r\n\r\n  constructor() {\r\n    this.board = new Board(document.querySelector('canvas'));\r\n    this.players = [new PlayerHuman(BoardPiece.PLAYER_1), new PlayerAi(BoardPiece.PLAYER_2)];\r\n    this.currentPlayerId = 0;\r\n    this.isMoveAllowed = false;\r\n    this.isGameWon = false;\r\n    this.board.render()\r\n    this.board.debug()\r\n  }\r\n  async start() {\r\n    this.isMoveAllowed = true;\r\n    while (!this.isGameWon) {\r\n      await this.move();\r\n      const winner = this.board.getWinner();\r\n      if (winner !== BoardPiece.EMPTY) {\r\n        this.isGameWon = true\r\n        this.isMoveAllowed = false\r\n        break\r\n      }\r\n    }\r\n  }\r\n  async move() {\r\n    if (!this.isMoveAllowed) {\r\n      return\r\n    }\r\n    const currentPlayer = this.players[this.currentPlayerId];\r\n    let actionSuccesful = false;\r\n    while (!actionSuccesful) {\r\n      const action = await currentPlayer.getAction(this.board);\r\n      this.isMoveAllowed = false;\r\n      actionSuccesful = await this.board.applyPlayerAction(currentPlayer, action);\r\n      this.isMoveAllowed = true;\r\n    }\r\n    this.currentPlayerId = this.getNextPlayer();\r\n  }\r\n  private getNextPlayer() {\r\n    return (this.currentPlayerId === 0) ? 1 : 0;\r\n  }\r\n}\r\n\r\nconst game = new Game()\r\ngame.start()\r\n"]}