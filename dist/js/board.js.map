{"version":3,"sources":["board.ts"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["import { Player } from './player';\r\nimport { Utils } from './utils';\r\n\r\nexport enum BoardPiece {\r\n  EMPTY,\r\n  PLAYER_1,\r\n  PLAYER_2,\r\n  DRAW\r\n}\r\nexport class Board {\r\n  static row: number = 6;\r\n  static column: number = 7;\r\n  map: Array<Array<number>>;\r\n  private winnerBoardPiece: BoardPiece;\r\n\r\n  canvas: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.map = []\r\n    for (let i = 0; i < Board.row; i++) {\r\n      this.map.push([])\r\n      for (let j = 0; j < Board.column; j++) {\r\n        this.map[i].push(BoardPiece.EMPTY)\r\n      }\r\n    }\r\n\r\n    this.canvas = canvas;\r\n    this.context = canvas.getContext('2d');\r\n    this.winnerBoardPiece = BoardPiece.EMPTY;\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns is the action succesfully applied\r\n   * @param player current player\r\n   * @param column the colum in which the player want to drop a piece\r\n   */\r\n  async applyPlayerAction(player: Player, column: number): Promise<boolean> {\r\n    if (this.map[0][column] !== BoardPiece.EMPTY || column < 0 || column >= Board.column) {\r\n      return false\r\n    }\r\n\r\n    let isColumnEverFilled = false;\r\n    let row = 0;\r\n    for (let i = 0; i < Board.row - 1; i++) {\r\n      if (this.map[i + 1][column] !== BoardPiece.EMPTY) {\r\n        isColumnEverFilled = true;\r\n        row = i;\r\n        break;\r\n      }\r\n    }\r\n    if (!isColumnEverFilled) {\r\n      row = Board.row - 1;\r\n    }\r\n\r\n    await this.animateAction(row, column, player.boardPiece)\r\n\r\n    // reflect player's action to the map\r\n    this.map[row][column] = player.boardPiece;\r\n    this.debug()\r\n\r\n    await Utils.animationFrame()\r\n    this.render()\r\n    return true\r\n  }\r\n\r\n  debug() {\r\n    console.log(this.map.map(row => row.join(' ')).join('\\n'))\r\n  }\r\n\r\n  getWinner(): BoardPiece {\r\n    if (this.winnerBoardPiece !== BoardPiece.EMPTY) {\r\n      return this.winnerBoardPiece\r\n    }\r\n    const direction = [\r\n      [0, -1],\r\n      [0, 1],\r\n      [-1, -1],\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [1, -1],\r\n      [1, 0],\r\n      [1, 1]\r\n    ]\r\n    const isWinningSequence = (i: number, j: number, playerPiece: BoardPiece, dir: Array<number>, count: number): boolean => {\r\n      if (count >= 4) {\r\n        return true\r\n      }\r\n      if (i < 0 || j < 0 || i >= Board.row || j >= Board.column || this.map[i][j] !== playerPiece) {\r\n        return false\r\n      }\r\n      return isWinningSequence(i + dir[0], j + dir[1], playerPiece, dir, count + 1);\r\n    }\r\n    let countEmpty = 0\r\n    for (let i = 0; i < Board.row; i++) {\r\n      for (let j = 0; j < Board.column; j++) {\r\n        const playerPiece = this.map[i][j];\r\n        if (playerPiece !== BoardPiece.EMPTY) {\r\n          for (let k = 0; k < direction.length; k++) {\r\n            const isWon = isWinningSequence(i + direction[k][0], j + direction[k][1], playerPiece, direction[k], 1)\r\n            if (isWon) {\r\n              return this.winnerBoardPiece = playerPiece\r\n            }\r\n          }\r\n\r\n        } else {\r\n          countEmpty++\r\n        }\r\n      }\r\n    }\r\n    if (countEmpty === 0) {\r\n      return this.winnerBoardPiece = BoardPiece.DRAW\r\n    }\r\n\r\n    return BoardPiece.EMPTY\r\n  }\r\n\r\n  announceWinner() {\r\n    if (this.winnerBoardPiece === BoardPiece.EMPTY) {\r\n      return\r\n    }\r\n    let message = 'Thank you for playing - '\r\n    if (this.winnerBoardPiece === BoardPiece.DRAW) {\r\n      message += `It's a draw`\r\n    } else {\r\n      message += `Player ${this.winnerBoardPiece} wins`\r\n    }\r\n    message += \" - Click to reset\";\r\n    Utils.drawText(this.context, {\r\n      message,\r\n      x: 150,\r\n      y: 20,\r\n      maxWidth: 400\r\n    })\r\n  }\r\n\r\n  private getPlayerColor(boardPiece: BoardPiece): string {\r\n    switch (boardPiece) {\r\n      case BoardPiece.PLAYER_1: return '#ff4136';\r\n      case BoardPiece.PLAYER_2: return '#0074d9';\r\n      default: return 'transparent';\r\n    }\r\n  }\r\n  private async animateAction(newRow: number, column: number, boardPiece: BoardPiece): Promise<void> {\r\n    const fillStyle = this.getPlayerColor(boardPiece)\r\n    let currentY = 0\r\n    const doAnimation = async () => {\r\n      Utils.clearCanvas(this)\r\n      Utils.drawCircle(this.context, {\r\n        x: 75 * column + 100,\r\n        y: currentY + 50,\r\n        r: 25,\r\n        fillStyle: fillStyle,\r\n        strokeStyle: 'black'\r\n      })\r\n      this.render()\r\n      currentY += 25\r\n    }\r\n    while (newRow * 75 >= currentY) {\r\n      await Utils.animationFrame()\r\n      doAnimation()\r\n    }\r\n  };\r\n\r\n  render() {\r\n    Utils.drawMask(this)\r\n    let x, y;\r\n    for (y = 0; y < Board.row; y++) {\r\n      for (x = 0; x < Board.column; x++) {\r\n        Utils.drawCircle(this.context, {\r\n          x: 75 * x + 100,\r\n          y: 75 * y + 50,\r\n          r: 25,\r\n          fillStyle: this.getPlayerColor(this.map[y][x]),\r\n          strokeStyle: 'black'\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}