{"version":3,"sources":["board.ts"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["import {Player} from './player';\r\nimport {Utils} from './utils';\r\n\r\nexport enum BoardPiece {\r\n  EMPTY,\r\n  PLAYER_1,\r\n  PLAYER_2\r\n}\r\nexport class Board {\r\n  row: number = 6;\r\n  column: number = 7;\r\n  map: Array<Array<number>>;\r\n\r\n  canvas: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.map = []\r\n    for (let i = 0; i < this.row; i++) {\r\n      this.map.push([])\r\n      for (let j = 0; j < this.column; j++) {\r\n        this.map[i].push(BoardPiece.EMPTY)\r\n      }\r\n    }\r\n\r\n    this.canvas = canvas;\r\n    this.context = canvas.getContext('2d');\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns is the action succesfully applied\r\n   * @param player current player\r\n   * @param column the colum in which the player want to drop a piece\r\n   */\r\n  applyPlayerAction(player: Player, column: number): boolean {\r\n    if (this.map[0][column] !== BoardPiece.EMPTY || column < 0 || column >= this.column) {\r\n      return false\r\n    }\r\n\r\n    let isColumnEverFilled = false;\r\n    let row = 0;\r\n    for (let i = 0; i < this.row; i++) {\r\n      if (this.map[i + 1][column] !== BoardPiece.EMPTY) {\r\n        isColumnEverFilled = true;\r\n        row = i;\r\n        break;\r\n      }\r\n    }\r\n    if (!isColumnEverFilled) {\r\n      row = this.row - 1;\r\n    }\r\n\r\n    this.map[row][column] = player.boardPiece;\r\n\r\n    return true\r\n  }\r\n\r\n  private getPlayerColor(boardPiece: BoardPiece): string {\r\n    switch (boardPiece) {\r\n      case BoardPiece.PLAYER_1: return \"#ff4136\";\r\n      case BoardPiece.PLAYER_2: return \"#0074d9\";\r\n      default: return \"transparent\";\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let x, y;\r\n    for (y = 0; y < this.row; y++) {\r\n      for (x = 0; x < this.column; x++) {\r\n        Utils.drawCircle(this.context, {\r\n          x: 75 * x + 100,\r\n          y: 75 * y + 50,\r\n          r: 25,\r\n          fill: this.getPlayerColor(this.map[y][x]),\r\n          stroke: \"black\"\r\n        });\r\n      }\r\n    }\r\n  }\r\n}"]}